---
- name: Container Lab Engine for Self Service Labs
  gather_facts: false
  hosts: "{{ lab_hosts }}"
  become: true
  vars_files:
    - "{{ lab_title }}/{{ lab_title }}-vars.yml"
    - base_vars.yml
  tasks:
    ### Create User and Lab specific directory on remote linux server hosting containerlab
    - name: Create User Specific Lab Directory
      ansible.builtin.file:
        path: "/opt/containerlab/labs/{{ lab_username }}/{{ lab_title }}"
        state: directory
      when: '"deploy" in actions'

    ### Declare unique Subnet Per user to be used later for Docker Container network
    - name: Set CLAB Docker IP Network for Each User
      ansible.builtin.set_fact:
        ipv4_subnet: 172.100.{{ user_map[lab_username] }}.0/24
      changed_when: false
      when: '"deploy" in actions'

    ### Use local topology jinja2 file to build remote containerlab topology file with per user/lab variables
    - name: Build Lab Topology File
      ansible.builtin.template:
        src: "{{ lab_title }}/{{ lab_title }}.j2"
        dest: "/opt/containerlab/labs/{{ lab_username }}/{{ lab_title }}/{{ lab_title }}-{{ lab_username }}.clab.yml"
      when: '"deploy" in actions'

    ### Run Container Lab Deploy to build lab from .clab.yaml topology file
    - name: Deploy Lab File
      ansible.builtin.command:
        chdir: /opt/containerlab/labs/{{ lab_username }}/{{ lab_title }}
        cmd: containerlab deploy
      when: '"deploy" in actions'

    ### Show All Docker Containers Running By current User
    - name: Show Docker Containers
      ansible.builtin.command:
        chdir: /opt/containerlab/labs/{{ lab_username }}/{{ lab_title }}
        cmd: docker container ls -f name={{ lab_username }}
      register: docker_output
      when: ("deploy" in actions) or ("inspect" in actions)
      changed_when: false

    - name: Print Docker Output
      ansible.builtin.debug:
        msg: "{{ docker_output.stdout_lines }}"
      when:
        - docker_output is defined
        - ("deploy" in actions) or ("inspect" in actions)

    ### Inspect containerlab info for current user and lab
    - name: Inspect Lab Topology
      ansible.builtin.command:
        chdir: /opt/containerlab/labs/{{ lab_username }}/{{ lab_title }}
        cmd: containerlab inspect
      register: deploy_output
      when: ("deploy" in actions) or ("inspect" in actions)
      changed_when: false
      failed_when: false

    - name: Print Lab Topology Output
      ansible.builtin.debug:
        msg: "{{ deploy_output.stdout_lines }}"
      when:
        - deploy_output is defined
        - ("deploy" in actions) or ("inspect" in actions)
        - ("stdout_lines" in deploy_output) and (deploy_output.stdout_lines | length > 0)

    - name: Print Lab Topology Output When Nothing Returned
      ansible.builtin.debug:
        msg: "Found No Running Lab Environment: {{ deploy_output.stdout_lines }}"
      when:
        - deploy_output is defined
        - "'stdout_lines' in deploy_output"
        - "deploy_output.stdout_lines | length == 0"
        - ("deploy" in actions) or ("inspect" in actions)

    ### Powerdown lab nodes while maintaining startup configuration
    - name: Shutdown Lab
      ansible.builtin.command:
        chdir: /opt/containerlab/labs/{{ lab_username }}/{{ lab_title }}
        cmd: containerlab destroy
      when: '"shutdown" in actions'
      changed_when: true

    ### Powerdown and delete all startup configuration of nodes
    - name: Destroy Lab
      ansible.builtin.command:
        chdir: /opt/containerlab/labs/{{ lab_username }}/{{ lab_title }}
        cmd: containerlab destroy -c
      when: '"destroy" in actions'
      changed_when: true

    ### Run containerlab save on all nodes to save startup configs locally
    - name: Save Lab
      ansible.builtin.command:
        chdir: /opt/containerlab/labs/{{ lab_username }}/{{ lab_title }}
        cmd: containerlab save
      when: '"save" in actions'
      changed_when: false

    # - name: Simulate output capture
    #   set_fact:
    #     container_output: "{{ lookup('file', 'your_output_file.json') | from_json }}"

    - name: Collect port mappings
      when:
        - ("deploy" in actions)
        - ("inspect" in actions)
      block:
        - name: Extract port mappings
          ansible.builtin.set_fact:
            port_mappings: "{{ port_mappings | default({}) | combine({item.split()[-1]: (item | regex_search('0.0.0.0:(\\d+)->22/tcp', '\\1') | first)}) }}"
          loop: "{{ docker_output.stdout_lines }}"
          when: "'22/tcp' in item"

        - name: Show port mappings
          ansible.builtin.debug:
            var: port_mappings


    - name: Print Instructions
      ansible.builtin.debug:
        msg:
          - "to connect to your Containers: ssh <default router user>@{{ inventory_hostname }} -p 5{{ user_map[lab_username] }}XX"
          - "to create IP interface on a linux container. First SSH then RUN command: sudo ifconfig <interface> <ip> netmask <mask>"
          - "to capture traffic and redirect locally to windows wireshark: {{ wireshark_command }}"
      when:
        - deploy_output is defined
        - ("deploy" in actions) or ("inspect" in actions)
